#
# This file describes test cases in a set of structure descriptions.
#
# An individual test case is described by the duts_tc structure
#
# duts_tc <name> {
#	Type
#	Commands
#	Info
#	...
# }
#
# Note that <name> of a test case must be unique within the scope of the whole
# framework; there's no checking against this and in case of a duplicate the
# most recent entry prevails
#

duts_tc UBootBase {
	######################################################################
	# section Type, mandatory
	#
	# points to a context required by the TC like:
	#	u-boot
	#	linux
	#	host
	#	etc.
	#
	# please note the context specified here needs to be defined in a
	# respective duts_config structure (/<testsystem_dir>/config/*.cfg
	# files) in order for the TC to execute
	######################################################################
	Type u-boot

	######################################################################
	# section Logfile, optional
	#
	# sets the name of a log file with TC results after execution, if
	# ommited the report file is named after the TC name and .log appended
	######################################################################
	Logfile example.log

	######################################################################
	# section Commands, mandatory
	#
	# describes flow of commands to be executed in the test case and the
	# expected output the framework validates.
	#
	# can have two forms: regular and special handling:
	#
	# 1. regular - has one or more entries i.e. lines. Multiple entries
	# must be enclosed with {} braces. An individual line of this form has
	# the following structure of two fields:
	#
	# <command(s) to execute> <expected result>
	#
	# Notes:
	#   - it is always safer to put double quotes around the fields (for
	#   cases with white spaces, multiple commands)
	#
	#   - <expected result> field can be a regexp
	#
	# Example: Commands { "setenv foo bar;printenv foo" "foo" pass }
	#
	# 2. special handling - has only one line (braces not required) which
	# points to external file to execute, has the following format:
	#
	# !<path>
	#
	# Example: Commands
	# !/some/path/to/custom/script/or/program/please_execute_me
	#
	# ** IMPORTANT RESTRICTION ** when using variables from Vars section:
	# it is not allowed to put both DUTS and U-Boot vars in the same
	# command line because when using U-Boot vars they must NOT be
	# substituted (and delimited with {} brackets, not "")! Please refer
	# to UBootInstallRamdisk TC for example how to handle this
	# (testsystems/dulg/testcases/non-59.tc file)
	#
	# ** THE ABOVE NOTICE APPLIES TO Pre AND Post SECTIONS ALSO! **
	######################################################################
	Commands {
		"base" "Base Address: .*"
		"md 0 c" ".*"
		"base 40000000" "Base Address: 0x40000000"
		"md 0 c" ".*"
	}

	######################################################################
	# section Pre, optional
	#
	# describes flow of commands to be executed in the test case BEFORE
	# the proper Commands section (described above) with identical syntax.
	# Allows for execution of certain preliminary commands before the
	# proper test cases flow.
	#
	# Note the output from execution in this flow in NOT recorded to a log
	# file.
	######################################################################
	Pre {
		"base 100000" ".*"
	}

	######################################################################
	# section Post, optional
	#
	# describes flow of commands to be executed in the test case AFTER the
	# proper Commands section (described above) with identical syntax.
	# Allows for execution of certain commands after the proper test cases
	# flow.
	#
	# Note the output from execution in this flow in NOT recorded to a log
	# file.
	######################################################################
	Post {
		"base 0" ".*"
	}

	######################################################################
	# section Timeout, optional
	#
	# sets timeout period for response to a command when executing
	# Commands/Pre/Post sections, as some test cases require it longer
	# than the default. Has the scope of one test case i.e. consecutive
	# test cases get default timeout again (unless overwritten with their
	# Timeout section).
	#
	######################################################################
	Timeout 300

	######################################################################
	# section Result, optional
	#
	# indicates the desired outcome of the test case and influences the
	# final report statement on the test case's outcome; can have one of
	# the following two values:
	#
	#	pass - this is the default, usually not needed, requires that
	#	the test case pass (see below for 'passing' definition)
	#
	#	fail - this flag denotes the test case is known (and allowed)
	#	to fail; a failing test case with 'fail' value for the Result
	#	section	will be reported passed in the final report
	#
	# A given test case is considered 'passed' when output received for a
	# command matches the expected result for each entry defined in the
	# Commands section; any non matching entry causes the test case to
	# fail.
	######################################################################
	Result pass

	######################################################################
	# section Info, optional
	#
	# contains a textual description of a test case for further processing
	# (test documentation maybe etc.)
	######################################################################
	Info {Example description of a simple test case}
}


duts_tc UBootCrcStore {
	Type u-boot
	Commands {
		"crc 100004 3FC 100000" "CRC32 for .*"
		"md 100000 4" "00100000: .*"
	}

	Info {This is a CRC test case comment}
}

#
# this is an example of test case that executes commands on the host (not the
# target!) - note the 'host' Type - Commands section can also have the
# "!path_to_custom_expect_script" form and execute user-defined expect scripts
#
duts_tc ls_on_host {
	Type host
	Commands {
		"ls -l" ".*"
	}
}
