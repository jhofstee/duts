#
# This file describes test cases in a set of structure descriptions.
#
# An individual test case is described by the duts_tc structure
# 
# duts_tc <name> {
#	Type
#	Commands
#	Info
#	...
# }
#
#   Note - <name> of a test case must be unique within the scope of the whole
#   framework; there's no checking against this and in case of a duplicate the
#   most recent entry prevails
#


duts_tc UBootBase {
	######################################################################
	# section Type, mandatory
	#
	# defines a TC's prerequisite and can be:
	#	u-boot
	#	linux-console
	#	linux-ssh
	#	linux-telnet
	######################################################################
	Type u-boot

	######################################################################
	# section Logfile, optional
	#
	# sets the name of a log file with TC results after execution, if
	# ommited the report file is named after the TC name and .log appended
	######################################################################
	Logfile example.log

	######################################################################
	# section Commands, mandatory
	#
	# describes flow of commands to be executed in the test case and the
	# expected output the framework validates. 
	#
	# can have two forms: regular and special handling:
	#
	# 1. regular - has one or more entries i.e. lines. Multiple entries
	# must be enclosed with {} braces. An individual line of this form has
	# the following structure of two fields:
	#
	# <command(s) to execute> <expected result>
	#
	# Notes:
	#   - it is always safer to put double quotes around the first two
	#   fields (for cases with white spaces, multiple commands)
	#   - <expected result> field can be a regexp
	# 
	# Example:
	#   Commands {
	#	"setenv foo bar;printenv foo" "foo" pass
	#   }
	#
	# 2. special handling - has only one line (braces not required) which
	# points to external file to execute, has the following format:
	#
	# !<path>
	#
	# Example:
	#   Commands !/some/path/to/custom/script/or/program/please_execute_me
	#
	######################################################################
	Commands {
		"base" "Base Address: .*"
		"md 0 c" ".*"
		"base 40000000" "Base Address: 0x40000000"
		"md 0 c" ".*"
	}

	######################################################################
	# section Result, optional
	# 
	# indicates the desired outcome of the test case and influences the
	# final report statement on the test case's outcome; can have one of 
	# the following two values:
	#
	#	pass - this is the default, usually not needed, requires that
	#	the test case pass (see below for 'passing' definition)
	#
	#	fail - this flag denotes the test case is known (and allowed)
	#	to fail; a failing test case with 'fail' value for the Result 
	#	section	will be reported passed in the final report
	#
	# A given test case is considered 'passed' when output received for a
	# command matches the expected result for each entry defined in the
	# Commands section; any non matching entry causes the test case to
	# fail.
	######################################################################
	Result pass
	
	######################################################################
	# section Info, optional
	#
	# contains a textual description of a test case for further processing
	# (test documentation maybe etc.)
	######################################################################
	Info {Example description of a simple test case}
}


duts_tc UBootCrcStore {
	Type u-boot
	Commands {
		"crc 100004 3FC 100000" "CRC32 for .*"
		"md 100000 4" "00100000: .*"
	}
	
	Info {This is a CRC test case comment}
}


duts_tc UBootMd {
	Type u-boot
	Commands !/bin/ls
}


duts_tc "aa bb aa" {
	Type linux-ssh
	Commands {
	}
}

