#
# (C) Copyright 2006, 2007 by Rafal Jaworowski <raj@semihalf.com> for DENX Software Engineering
# (C) Copyright 2008 by Detlev Zundel <dzu@denx.de>, DENX Software Engineering
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#

set linux_ver ""
set build_name ""

proc is_linux_24 { foo } {
	if { [expr ($foo & 0xffff00)] == 0x20400 } {
		return 1;
	} else {
		return 0;
	}
}

#
#
# checks linux config file based on the config name core stored in $img_name,
# returns 0/1 if not/found according file. Requires linux_ver to be defined
#
proc check_linux_config {} {

	global img_src img_name build_arch linux_ver build_name

	set c $img_name
	set build_name $img_name

# simple check. Vague kernel versions will bail out before this.
	if { [is_linux_24 $linux_ver] } {
		append build_name "_config"
	} else {
		append build_name "_defconfig"
	}
#config filenames are invariant
	append c "_defconfig"

	set cf "$img_src/arch/$build_arch/configs/$c"
	if {([file exists $cf]) && ([file readable $cf])} {
		p_verb "found config file '$cf'"
	} else {
		p_err "no kernel config file: '$cf'"
		return 0
	}

	return 1
}

#
# validates environment for kernel build:
#
# 1. check tools
#   - path makes sense, gcc, ld etc. exist?
#
# 2. check obj dir - valid only for linux 2.6
#  - variable set
#  - directory exists, writable?
#
# 3. check src dir
#   - exists, writable?
#   - looks like a kernel tree?
#
# 4. check dst
#   - if dir: exists, writable?
#   - if endfile: already exists?
#
# 5. check kernel config file
#   - exists _defconfig
#
# v: version
# p: patchlevel
#
proc valid_linux_env {} {

	global img_name img_src img_dst
	global obj_dir
	global build_tools build_arch build_cross
	global overwrite no_clean
	global env
	global linux_ver

	## 1. check tools

	##
	## set env vars: ARCH, CROSS_COMPILE
	##
	set env(ARCH) $build_arch
	set env(CROSS_COMPILE) $build_cross

	set linux_ver [get_linux_ver $img_src]
	p_banner "Detected Linux version [format "0x%02x" $linux_ver]" #

	## 2. check obj dir - valid only for linux 2.6

	##
	## validate obj dir
	##  - variable set
	##  - directory exists, writable?
	##

	if {[var_exists obj_dir] && ($obj_dir != "")} {
		if { [expr ( $linux_ver & 0xffff00) ] == 0x20600 } {
			# strip trailing slash
			set obj_dir [string trimright $obj_dir "/"]
			if ![valid_dir $obj_dir 1] {
				p_err "Problems accessing obj dir?!"
				return 0
			}

			# set the env variable
			set env(KBUILD_OUTPUT) $obj_dir
			p_verb "working with obj dir: '$obj_dir'"
		} else {
			p_err "attempted to use obj dir feature for a non 2.6\
				kernel"
		}
	}

	## 5. check kernel config file
	##
	## - exists <name>_config, <name>_defconfig

	#
	# if user-provided kernel config name was '.+config' we only save the
	# core of the name for further processing when it will be personalized
	# with _config or _defconfig suffix depending on context. This is
	# mainly due to different handling of config name in Linux 2.4
	# (make <name>_config) vs. 2.6 (make <name>_defconfig)
	# e.g. for TQM834x_defconfig save only the 'TQM834x' part
	#
	regexp {(.+)(_.*config)} $img_name in1 in2 in3]
	if [info exists in1] {
		set img_name $in2
	}

	if ![check_linux_config] {
		return 0
	}
	p_verb "using '$img_name' kernel config"

	##
	## verify if we can skip configuration steps
	##
	if {$no_clean == "yes"} {
		if [file exists $img_src/.config] {
			p_verb "performing 'no-clean' build, config steps will\
			be skipped"
		} else {
			p_verb "'no-clean' build specified but no .config\
			file found so doing full build anyway..."
			set no_clean "no"
		}
	}

	return 1
}

proc make_mrproper {} {

	if ![exec2_log "make mrproper" res] {
		p_err "$res"
		return 0
	} else {
		p_verb "make mrproper OK"
	}

	return 1
}

proc bld_valid_env {} {

	return [valid_linux_env]
}

proc bld_pre {} {

	p_banner "make mrproper" #
	return [make_mrproper]
}

proc bld_config {} {

	global img_name linux_ver build_name
	lappend cmd_list "make $build_name"
	if [is_linux_24 $linux_ver] {
		lappend cmd_list "make oldconfig"
	}
	foreach val $cmd_list {
		p_banner $val #

		if ![exec2_log $val res] {
			p_err "$res"
			return 0
		} else {
			p_verb "$val OK"
		}
	}
	return 1
}

proc bld_image {} {

	global img_name linux_ver

	if [is_linux_24 $linux_ver] {
		lappend cmd_list "make dep"
	}

	lappend cmd_list "make uImage"

	foreach val $cmd_list {
		p_banner $val #

		if ![exec2_log $val res] {
			p_err "$res"
			return 0
		} else {
			p_verb "$val executed OK"
		}
	}
	return 1
}

proc bld_post {} {

	global build_arch img_dst img_src obj_dir

	##
	## copy image to the desired location
	##
	p_banner "copy image to destination" *


	if {$build_arch == "ppc"} {
		set img_file "arch/ppc/boot/images/uImage"
	} else {
		set img_file "arch/$build_arch/boot/uImage"
	}

	if {[var_exists obj_dir] && ($obj_dir != "")} {
		set img_file "$obj_dir/$img_file"
	} else {
		set img_file "$img_src/$img_file"
	}

	if {$img_dst == ""} {
		p_verb "no destination location specified, nothing to do.."
	} else {
		p_banner "Copying image to '$img_dst'\n" *
		if ![host_copy $img_file $img_dst] {
			return 0
		}
		p_verb "copied '$img_file' to '$img_dst'"
	}
	return 1
}
