#
# (C) Copyright 2006, 2007 Rafal Jaworowski <raj@semihalf.com> for DENX Software Engineering
# (C) Copyright 2008 Detlev Zundel <dzu@denx.de>, DENX Software Engineering
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#

#
# implementation of bld_ methods for building U-Boot image
#

#
# checks U-Boot tree: takes a peek in the main Makefile for familiar strings
# returns 0/1 if doesn't/match
#
proc check_uboot_tree {} {

	global img_src

	set cmd "grep"
	set cmd_arg "-r \"U_BOOT_VERSION =\" $img_src/Makefile"

	if [catch {set o [eval exec $cmd $cmd_arg]}] {
		p_verb "U_BOOT_VERSION string not found"
		return 0
	} else {
		p_verb "U-Boot source tree recognized, OK"
	}

	return 1
}

proc make_mrproper {} {

	if ![exec2_log "make mrproper" res] {
		p_err "$res"
		return 0
	} else {
		p_verb "make mrproper OK"
	}

	return 1
}

#
# validates environment for U-Boot build:
#
# 1. check tools
#   - path makes sense, gcc, ld etc. exist?
#
# 3. check obj dir
#   - variable set
#   - exists, writable?
#
# 3. check src dir
#   - exists, writable?
#   - looks like a U-Boot tree?
#
# 4. check dst
#   - if dir: exists, writable?
#   - if endfile: already exists?
#
# 5. check config file
#   - exists include/config.h
#
proc bld_valid_env {} {

	global img_name img_src img_dst
	global obj_dir
	global build_tools build_arch build_cross
	global overwrite no_clean
	global env

	## 1. check tools

	##
	## set env vars: ARCH, CROSS_COMPILE
	##
	set env(ARCH) $build_arch
	set env(CROSS_COMPILE) $build_cross

	##
	## set PATH so the desired toolchain is available
	##
	if ![set_host_tool_path $build_tools] {
		p_err "path to the build tools not accessible: '$p'?!"
		return 0
	}

	##
	## check tools availability:
	##  - a selected tool from cross build suite, let's have a look at
	##    gcc and ld
	##
	set cmd_gcc $build_cross
	append cmd_gcc "gcc"
	set cmd_ld $build_cross
	append cmd_ld "ld"

	set tools [list $cmd_gcc $cmd_ld]
	if ![check_host_tools tools] {
		return 0
	}
	p_verb "all tools in place, proceeding"


	## 2. check obj dir

	##
	## validate obj dir
	##  - variable set
	##  - directory exists, writable?
	##

	if {[var_exists obj_dir] && ($obj_dir != "")} {
		# strip trailing slash
		set obj_dir [string trimright $obj_dir "/"]
		if ![valid_dir $obj_dir 1] {
			p_err "Problems accessing obj dir?!"
			return 0
		}

		# set the env variable
		set env(BUILD_DIR) $obj_dir
		p_verb "working with obj dir: '$obj_dir'"
	}


	## 3. check src dir

	##
	## validate source dir
	##
	##  - exists, writable?
	##  - looks like a U-Boot tree?
	##

	# strip trailing slash
	set img_src [string trimright $img_src "/"]

	# img_src needs to be writable only when obj_dir isn't used
	if {[var_exists obj_dir] && ($obj_dir != "")} {
		set src_dir_ok [valid_dir $img_src]
	} else {
		set src_dir_ok [valid_dir $img_src 1]
	}
	if {!$src_dir_ok} {
		p_err "Problems accessing source dir?!"
		return 0
	}

	if ![check_uboot_tree] {
		p_err "Doesn't look like U-Boot source tree: '$img_src'?!\
		Check your -s value."
		return 0
	}
	p_verb "working with source dir: '$img_src'"


	## 4. check dst

	##
	## validate  destination location
	## - if dir: exists, writable?
	## - if endfile: already exists?
	##
	set o [expr {($overwrite == "yes") ? 1 : 0}]
	set img_dst [string trimright $img_dst "/"]
	if ![check_dst $img_dst $o "u-boot.bin"] {
		return 0
	}

	## 5. check U-Boot config file
	##
	## - exists include/configs/<name>.h

	# extract only the core config name if supplied in <name>_config
	# fashion
	regexp {(.+)(_.*config)} $img_name in1 in2 in3]
	if [info exists in1] {
		set img_name $in2
	}
	set c $img_name
	append c ".h"
	set cf "$img_src/include/configs/$c"
	if {([file exists $cf]) && ([file readable $cf])} {
		p_verb "found config file '$cf'"
	} else {
		p_err "no U-Boot config file: '$cf'?! Check your -n value."
		return 0
	}
	p_verb "using U-Boot config: '$img_name'"

	##
	## verify if we can skip configuration steps
	##
	if {$no_clean == "yes"} {
		if [file exists $img_src/include/config.h] {
			p_verb "performing 'no-clean' build, config steps will\
			be skipped"
		} else {
			p_verb "'no-clean' build specified but no\
			include/config.h file found so doing full build\
			anyway..."
			set no_clean "no"
		}
	}

	return 1
}

proc bld_pre {} {
	global build_prompt

	p_banner "make mrproper" #
	return [make_mrproper]
}

proc bld_config {} {

	global img_name

	set c "make $img_name"
	append c "_config"
	p_banner $c #

	if ![exec2_log $c res] {
		p_err "$res"
		return 0
	} else {
		p_verb "make ${img_name}_config OK"
	}

	return 1
}

proc bld_image {} {

	global img_name cur_logfile

	set c "make all"
	p_banner $c #

	if ![exec2_log $c res] {
		p_err "$res"
		return 0
	} else {
		p_verb "make all OK"
	}

	return 1
}

proc bld_post {} {

	global img_dst img_src obj_dir

	##
	## copy image to the desired location
	##
	p_banner "copy image to destination" *

	if {[var_exists obj_dir] && ($obj_dir != "")} {
		set img_file "$obj_dir/u-boot.bin"
	} else {
		set img_file "$img_src/u-boot.bin"
	}

	if {$img_dst == ""} {
		p_verb "no destination location specified, nothing to do.."
	} else {
		send_user -- "Copying image to '$img_dst'\n"
		if ![host_copy $img_file $img_dst] {
			return 0
		}
		p_verb "copied '$img_file' to '$img_dst'"
	}
	return 1
}
