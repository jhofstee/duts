#!/bin/env tclsh
#                                -*- Mode: tcl -*-
#
# (C) Copyright 2008, 2009 Detlev Zundel <dzu@denx.de>, DENX Software Engineering
#
# (C) Copyright 2006, 2007 Rafal Jaworowski <raj@semihalf.com> for DENX Software Engineering
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#

#
# This script builds image of Linux kernel or U-Boot according to user
# supplied parameters. Please use -h for help.
#
#
#  usage examples:
# ./build_image -n TQM834x_config -s /home/raj/linuxppc_2_4_devel \
#               -d /tftpboot/tqm834x linux-24
#
# ./build_image -n TQM834x_defconfig -s /home/raj/linux-2.6-denx \
#               -d /tftpboot/tqm834x/uImage-26-raj linux-26
#
# ./build_image -n motionpro -s /home/tur/git/linux-2.6-denx \
#               -obj /home/tur/tmp/linux-26_build -a powerpc \
#               -d /tftpboot/tur/motionpro/uImage-26-test linux-26
#
# ./build_image -n motionpro -s /home/tur/git/u-boot \
#               -obj /home/tur/tmp/u-boot_build \
#               -d /tftpboot/tur/motionpro/u-boot.bin-test uboot
#

package require cmdline

##
## locate our dependency base dir
##

# we have to do everything by hand as we are trying to load some helper
# routines library here, so cannot rely on it yet!
set dep_env "DUTS_BASE_DIR"
set dep_base_dir "."
if {[array get env $dep_env] > 0} {
        set dep_base_dir $env($dep_env)
        if {$dep_base_dir == ""} {
                set dep_base_dir "."
        } else {
                set dep_base_dir [string trimright $env($dep_env) "/"]
        }
}

##
## include helper lib.tcl
##
set lib "$dep_base_dir/include/lib.tcl"
if [catch {source $lib} err] {
        puts "ERROR: $err"
        puts "$dep_env env var probably not set correctly: '$dep_base_dir'."
        exit 1
}

##
## discover our base dir
##
set base_dir [file dirname $argv0]


##
## default values
##
set verbose "no"
set confirm "yes"
set overwrite "no"
set no_clean "no"

set build_config ""
set build_handler ""

#
# usage
#
proc usage {optlist} {
        global argv0 env

        puts "usage: [file tail $argv0] \[options\] <build-type>"
        puts ""
        puts "  The script builds a specified image from specified source\
        tree, using"
        puts "  tools specified with -m, -a, -c, and puts the resultant\
        image file to -d"
        puts "  specified location."
        puts ""
        puts "  possible \[options\] are listed below, defaults are in <>."
        puts ""
        puts [cmdline::usage $optlist]
        puts ""
        exit 1
}

#
# validates specification of destination path:
# 1. if exists: has to be (over)writable (file) dir
# 2. if doesn'n exist: parent dir has to writable
#
# dst: destination path
# ovr: applicable when existing endfile is specified in $dst - if 0 returns
#      error, if 1 checks whether file is overwritable
# dn:  default image name to look for
#
proc check_dst {dst {ovr "0"} {dn "uImage"}} {

        if {$dst == ""} {
                return 1
        }

        set rv 1
        if [file exists $dst] {
                # for existing paths we're only interested in file or directory
                set ft [file type $dst]
                switch -- $ft "file" {
                        if {$ovr} {
                                # we want to overwrite image files
                                if ![file writable $dst] {
                                        p_err "destination file not\
                                        overwritable: '$dst'"
                                        set rv 0
                                }

                        } else {
                                p_err "destination file already exists:\
                                '$dst'; use -o to overwrite"
                                set rv 0
                        }

                } "directory" {
                        if ![file writable $dst] {
                                p_err "destination dir not writable: '$dst'"
                                set rv 0
                        } else {
                                # dst specifies directory, so there can exist
                                # an image with default name - check for it
                                set d "$dst/$dn"
                                global overwrite
                                set o [expr {($overwrite == "yes") ? 1 : 0}]
                                set rv [check_dst $d $o $dn]
                        }

                } default {
                        p_err "file type '$ft' not supported: '$dst'. Check\
                        your -d value"
                        set rv 0
                }

        } else {
                # supplied path does not exist: we only accept specification
                # for a non-existing endfile (which will get created) but not
                # directory..
                if [regexp {/$} $dst] {
                        p_err "no such directory: '$dst'"
                        set rv 0
                } else {
                        # check parent dir for the file
                        set pd [file dirname $dst]
                        if ![valid_dir $pd 1] {
                                p_err "parent dir in '$dst' not valid"
                                set rv 0
                        } else {
                                p_verb "destination '$dst' OK"
                        }
                }
        }

        return $rv
}


#
# skeleton build routine - uses abstracted build methods that perform specific
# steps for a given build type
#
# 1. cd to <img_src>
# 2. spawn bash shell
# 3. bld_pre (e.g. mrproper)
# 4. bld_config (e.g. make <img_name>_defconfig)
# 5. bld_image (e.g. make uImage)
# 6. bld_post (e.g. copy to <img_dst>)
# 7. close shell
#
proc build_main {} {

        global confirm no_clean send_slow img_src
        global build_prompt

        ##
        ## validate build environment
        ##
        if ![bld_valid_env] {
                exit1
        }

        p_banner "Starting image build, please wait." #

        set cur_dir [pwd]
        cd $img_src

        ##
        ## bld_pre
        ##
        if {$no_clean == "yes"} {
                p_warn "no-clean build: skipping build preparation phase"
        } else {
                if ![bld_pre] {
                        exit1
                }
        }

        ##
        ## bld_config
        ##
        if {$no_clean == "yes"} {
                p_warn "no-clean build: skipping build config phase"
        } else {
                if ![bld_config] {
                        exit1
                }
        }

        ##
        ## bld_image
        ##
        if ![bld_image] {
                exit1
        }

        # bld_post can possibly do different things on the host, so let's get
        # back to our pwd once we're done with building the image
        cd $cur_dir

        ##
        ## bld_post
        ##
        if ![bld_post] {
                exit1
        }

        p_banner "Finished image build, thanks for patience." #

        return 1
}

#
# reads build methods implementation from external exp file: looks for
# bld_<img_type>.exp file and source if exists
#
#
# each method:
#   - returns 0/1 upon fail/success
#
#
#
# build methods:
#
# bld_valid_env
#   valid_linux_env 2 4, valid_uboot_env etc.
#
# bld_pre
#   mrproper
#
# bld_config
#   make ...config
#   [make oldconfig]
#   [make dep]
#
# bld_image
#   make uImage
#   make all
#
# bld_post
#   copy to dest dir
#
# implementation of these methods is in individual files:
#
# bld_<img_type>.exp - e.g. bld_linux.exp, bld_uboot.exp
#
proc read_build_methods {t} {
        global base_dir
        set rv 1

        set f "$base_dir/bld_$t.exp"
        if ![valid_file $f] {
                p_err "build type not supported: '$t', build methods\
                implementation file not found?!"
                return 0
        }

        if [catch {source $f} err] {
                p_err "problems with source'ing '$f'?!"
                puts "  $err"
                set rv 0
        } else {
                p_verb "using build methods implemented in file: '$f'"

                # check if the implementation file has all required methods
                set methods {
                        bld_valid_env bld_pre bld_config bld_image bld_post
                }
                foreach m $methods {
                        if ![proc_exists $m] {
                                p_err "build method '$m' is not implemented\
                                in file '$f'"
                                set rv 0
                        }
                }
                if $rv {
                        p_verb "all build methods in place, OK"
                }
        }

        return $rv
}

# Option handling
set options {
        {a.arg		""	"override ARCH setting"}
        {c.arg		""	"override CROSS_COMPILE setting"}
        {d.arg		""	"destination path name"}
        {n.arg		""	"name of configuration to use"}
        {obj.arg	""	"pathname for build directory (linux-26 and u-boot)"}
        {s.arg		""	"src tree location"}
        {nc			"'no-clean' build: don't clean and configure source"}
        {o			"force overwrite of destination file"}
        {v                      "be verbose"}
}

# Actually parse the parameters
if {[catch {cmdline::getoptions argv $options} res]} {
        puts "Unknown option\n"
        usage $options
} else {
        array set params $res
}

# No parameter gives help
if {[llength $argv] == 0} {
        puts "Need to specify a build-type (linux or u-boot)\n"
        usage $options
}

# Parse boolean parameters
if {$params(v)} {
        set verbose "yes"
        p_verb "verbose mode ON"
}
if {$params(o)} {
        set overwrite "yes"
        p_verb "overwrite existing image file"
}
if {$params(nc)} {
        set no_clean "yes"
}

set img_name $params(n)
set img_src $params(s)
set img_dst $params(d)
set obj_dir $params(obj)
set build_arch $params(a)
set build_cross $params(c)
set img_type [lindex $argv 0]

# Validate options
if {$img_src == ""} {
        p_err "No source given, aborting"
        exit 1
}
if {$img_dst == ""} {
        p_err "No destination given, aborting"
        exit 1
}
if {$img_name == ""} {
        p_err "No configuration name given, aborting"
        exit 1
}

##
## find get build methods implementation
##
if ![read_build_methods $img_type] {
        exit1
}

##
## get started
##
build_main
