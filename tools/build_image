#!/bin/env expect
#
# (C) Copyright 2006, 2007
# Wolfgang Denk, DENX Software Engineering, wd@denx.de
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#

#
# This script builds image of Linux kernel or U-Boot according to user
# supplied parameters. Please use -h for help.
# 
#
#  usage examples:
# ./build_image -n TQM834x_config -t linux-24 -s /home/raj/linuxppc_2_4_devel \
#               -d /tftpboot/tqm834x -to 600
#
# ./build_image -n TQM834x_defconfig -t linux-26 -s /home/raj/linux-2.6-denx \
#               -d /tftpboot/tqm834x/uImage-26-raj -to 600
#


##
## locate our dependency base dir  
##

# we have to do everything by hand as we are trying to load some helper
# routines library here, so cannot rely on it yet!
set dep_env "DUTS_BASE_DIR"
set dep_base_dir "."
if {[array get env $dep_env] > 0} {
	set dep_base_dir $env($dep_env)
	if {$dep_base_dir == ""} {
		set dep_base_dir "."
	} else {
		set dep_base_dir [string trimright $env($dep_env) "/"]
	}
}

##
## include helper lib.tcl 
##
set lib "$dep_base_dir/include/lib.tcl"
if [catch {source $lib} err] {
	puts "ERROR: $err"
	puts "$dep_env env var probably not set correctly: '$dep_base_dir'."
	exit 1
}

##
## discover our base dir
##
set base_dir [file dirname $argv0]


##
## default values
##
set verbose "no"
set confirm "yes"
set overwrite "no"
set no_clean "no"

set build_config ""
set build_handler ""

set build_prompt ""
set build_sid ""

set TIMEOUT 10

#
# table of user interface options, each element is
# {<global_var_name> "<opt_string>" "<default_value>"}
#
set opt_table {
	{img_type "t" "linux-26"}
	{img_name "n" "TQM834x"}
	{img_src "s" ""}
	{img_dst "d" ""}

	{build_timeout  "to" "600"}
	{build_tools "m" "/opt/eldk-4.0/usr/bin/"}
	{build_arch "a" "ppc"}
	{build_cross "c" "ppc_6xx-"}
}

#
# usage
#
proc usage {} {
	global argv0 env

	puts "usage: [file tail $argv0] \[parameters\]"
	puts ""
	puts "  The script builds -t specified image from -s specified source\
	tree, using"
	puts "  tools specified with -m, -a, -c, and puts the resultant\
	image file to -d"
	puts "  specified location."
	puts "  " 
	puts "  all \[parameters\] are optional and can be any combination of:"
	puts "  " 
#	puts "  <config>\t\tlabel of config set" 
	puts "  -t  <build_type>\tsupported build (linux-24, linux-26 or\
	uboot)"
	puts "  -n  <target_name>\tbuild target label (e.g. TQM834x, yucca)"
	puts "  -s  <img_src>\t\tsrc tree location (e.g.\
	/home/$env(USER)/linuxppc_2_4_devel)"
	puts "  -d  <img_dst>\t\tdst location (can be filename or\
	directory)"
	puts "  -to <timeout>\t\ttimeout in seconds to wait for build to\
	complete"
	puts "  -m  <build_tools>\tpath to build tools (e.g.\
	/opt/eldk-4.0/usr/bin/)"
	puts "  -a  <build_arch>\tbuild arch (e.g. ppc)"
	puts "  -c  <build_cross>\tcross build prefix (e.g. ppc_6xx-)"
	puts ""
	puts "  -nc \t'no-clean' build: do not wipe out and config sources"
	puts "  -o  \toverwrite dst file (-d), if exists (default is do not\
	overwrite)"
	puts "  -b  \tbatch mode, no user confirmation"
	puts "  -v  \tverbose output"
	puts "  -h  \tthis help"
	puts " " 
	exit
}

#
# dumps params
#
proc show_params {} {
	
	global opt_table
	set globals [list]

	# create list of global vars names from opt table
	foreach o $opt_table {
		set var_name [lindex $o 0]
		lappend globals $var_name
	}

	# add other interesting global vars to the list
	lappend globals "build_config" "confirm" "verbose" "overwrite" "no_clean"

	puts "--- Settings ---"
	foreach g $globals {
		global $g
		puts "$g = '[subst $$g]'"
	}
}

#
# validates specification of destination path:
# 1. if exists: has to be (over)writable (file) dir
# 2. if doesn'n exist: parent dir has to writable
#
# dst: destination path
# ovr: applicable when existing endfile is specified in $dst - if 0 returns
#      error, if 1 checks whether file is overwritable
# dn:  default image name to look for
#
proc check_dst {dst {ovr "0"} {dn "uImage"}} {

	if {$dst == ""} {
		return 1
	}
	
	set rv 1
	if [file exists $dst] {
		# for existing paths we're only interested in file or directory
		set ft [file type $dst]
		switch -- $ft "file" {
			if {$ovr} {
				# we want to overwrite image files
				if ![file writable $dst] {
					p_err "destination file not\
					overwritable: '$dst'"
					set rv 0
				}
				
			} else {
				p_err "destination file already exists:\
				'$dst'; use -o to overwrite"
				set rv 0
			}

		} "directory" {
			if ![file writable $dst] {
				p_err "destination dir not writable: '$dst'"
				set rv 0
			} else {
				# dst specifies directory, so there can exist
				# an image with default name - check for it
				set d "$dst/$dn"
				global overwrite
				set o [expr {($overwrite == "yes") ? 1 : 0}]
				set rv [check_dst $d $o $dn]
			}

		} default {
			p_err "file type '$ft' not supported: '$dst'. Check\
			your -d value"
			set rv 0
		}
		
	} else {
		# supplied path does not exist: we only accept specification
		# for a non-existing endfile (which will get created) but not
		# directory.. 
		if [regexp {/$} $dst] {
			p_err "no such directory: '$dst'"
			set rv 0
		} else {
			# check parent dir for the file
			set pd [file dirname $dst]
			if ![valid_dir $pd 1] {
				p_err "parent dir in '$dst' not valid"
				set rv 0
			} else {
				p_verb "destination '$dst' OK"
			}
		}
	}

	return $rv
}

#
# parameters are taken from (highest to lowest prio):
# 1. user-supplied in command line
# 2. config file
# 3. env vars
# 4. built-in defaults
#
# TODO config file
# TODO support for setting params via env vars
#

#
# parses command line parameters supplied by the user
#
proc parse_params {} {

	global argc argv
	global build_config
	global opt_table opt_list

	set errors 0

	for {set i 0} {$i < $argc} {incr i} {
		set a [lindex $argv $i]
		
		# check if this is -<opt> element
		if [regexp {^-.*} $a] {
			# eat the leading "-"
			set o [string trimleft $a "-"]

			if [on_list opt_list $o] {
				# we have option from opt_table
				incr i
				if ![opt_process $o [lindex $argv $i]] {
					set errors 1
				}
			} else {
				# remaining -<opt> cases (special)
				switch -- \
				$o "v" {
					global verbose
					set verbose "yes"
					p_verb "verbose mode ON"

				} "b" {
					global confirm
					set confirm "no"
					p_verb "no user confirmation"
				} "o" {
					global overwrite
					set overwrite "yes"
					p_verb "overwrite existing image file"
				} "nc" {
					global no_clean 
					set no_clean "yes"
				} "h" {
					usage
				}
			}
			continue
		}

		##
		## get config name
		##
		set build_config $a
		p_verb "config '$build_config'"
	}
	if {$errors > 0} {
		exit1
	}

	# TODO try loading _default config
	if {$build_config != ""} {
		#TODO
		# load config file
	}
}

#
# skeleton build routine - uses abstracted build methods that perform specific
# steps for a given build type
#
# 1. cd to <img_src>
# 2. spawn bash shell
# 3. bld_pre (e.g. mrproper)
# 4. bld_config (e.g. make <img_name>_defconfig)
# 5. bld_image (e.g. make uImage)
# 6. bld_post (e.g. copy to <img_dst>)
# 7. close shell
#
proc build_main {} {

	global confirm no_clean send_slow img_src
	global build_prompt build_sid build_timeout

	##
	## show params supplied and ask user before proceeding
	##
	if {$confirm == "yes"} {
		show_params
		if ![ask_yesno "confirm to start execution? "] {
			return	
		}
	}

	##
	## validate build environment
	##
	if ![bld_valid_env] {
		exit1
	}
	
	p_banner "Starting image build, please wait." #

	set cur_dir [pwd]
	cd $img_src

	##
	## spawn bash shell on host 
	##
	
	# assign spawn_id to global var so the shell is available outside 
	# this procedure, set other sending params
	set build_prompt "\\$\\ "
	set build_sid [host_bash_shell $build_prompt]
	set send_slow {1 .050}
	# expect buffer size
	match_max 16384

	##
	## bld_pre
	##
	if {$no_clean == "yes"} {
		p_warn "no-clean build: skipping build preparation phase"
	} else {
		if ![bld_pre] {
			exit1
		}
	}

	##
	## bld_config
	##
	if {$no_clean == "yes"} {
		p_warn "no-clean build: skipping build config phase"
	} else {
		if ![bld_config] {
			exit1
		}
	}

	##
	## bld_image
	##
	if ![bld_image $build_timeout] {
		exit1
	}

	# bld_post can possibly do different things on the host, so let's get
	# back to our pwd once we're done with building the image
	cd $cur_dir
	
	##
	## bld_post
	##
	if ![bld_post] {
		exit1
	}

	##
	## close spawned shell process
	##
	process_close $build_sid

	p_banner "Finished image build, thanks for patience." #

	return 1
}

#
# reads build methods implementation from external exp file: looks for
# bld_<img_type>.exp file and source if exists
#
#
# each method:
#   - assumes the shell is already open and available via globals:
#     $build_sid (spawn_id), $build_prompt
#
#   - returns 0/1 upon fail/success
#
#
#
# build methods:
#
# bld_valid_env
#   valid_linux_env 2 4, valid_uboot_env etc.
# 
# bld_pre
#   mrproper
#
# bld_config
#   make ...config
#   [make oldconfig]
#   [make dep]
#
# bld_image
#   make uImage
#   make all
#
# bld_post
#   copy to dest dir
#
# implementation of these methods is in individual files:
#
# bld_<img_type>.exp - e.g. bld_linux-26.exp, bld_linux-24.exp, bld_uboot.exp
#
proc read_build_methods {t} {
	global base_dir
	set rv 1
	
	set f "$base_dir/bld_$t.exp"
	if ![valid_file $f] {
		p_err "build type not supported: '$t', build methods\
		implementation file not found?!"
		return 0
	}

	if [catch {source $f} err] {
		p_err "problems with source'ing '$f'?!"
		puts "  $err"
		set rv 0
	} else {
		p_verb "using build methods implemented in file: '$f'"

		# check if the implementation file has all required methods
		set methods {
			bld_valid_env bld_pre bld_config bld_image bld_post
		}
		foreach m $methods {
			if ![proc_exists $m] {
				p_err "build method '$m' is not implemented\
				in file '$f'"
				set rv 0
			}
		}
		if $rv {
			p_verb "all build methods in place, OK"
		}
	}

	return $rv
}


set argc [llength $argv]

##
## create global variables out of options table
##
opt_create_globals

##
## parse paramters
##
parse_params


##
## find get build methods implementation
##
if ![read_build_methods $img_type] {
	exit1
}

##
## get started
##
build_main

##
## exit successfully if we got this far
##
exit
