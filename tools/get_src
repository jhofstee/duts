#!/bin/env tclsh
#                                -*- Mode: tcl -*-
#
# (C) Copyright 2006, 2007 Rafal Jaworowski <raj@semihalf.com> for DENX Software Engineering
# (C) Copyright 2008 Detlev Zundel <dzu@denx.de>, DENX Software Engineering
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#

package require cmdline

#
# This script fetches source tree from repository according to user
# supplied parameters. Please use -h for help.
#
#
#  usage examples:
# ./get_src -t git -s /home/git/linuxppc_2_4_devel -d linuxppc_2_4_devel_copy -r [branchID]
#
# ./get_src -s /git/duts/linuxppc_2_4_devel -d old_duts -r 373d8583b609f378dd6b81d7d45aef97e6ada526
#
#

##
## locate our dependency base dir
##

# we have to do everything by hand as we are trying to load some helper
# routines library here, so cannot rely on it yet!
set dep_env "DUTS_BASE_DIR"
set dep_base_dir "."
if {[array get env $dep_env] > 0} {
	set dep_base_dir $env($dep_env)
	if {$dep_base_dir == ""} {
		set dep_base_dir "."
	} else {
		set dep_base_dir [string trimright $env($dep_env) "/"]
	}
}

##
## include helper lib.tcl
##
set lib "$dep_base_dir/include/lib.tcl"
if [catch {source $lib} err] {
	puts "ERROR: $err"
	puts "$dep_env env var probably not set correctly: '$dep_base_dir'."
	exit 1
}


#
# usage
#
proc usage {optlist} {
	global argv0

	puts "usage: [file tail $argv0] \[parameters\]"
	puts ""
	puts "  The script fetches source tree from -s specified source repo\
	location to -d"
	puts "  location, the type of repo is specified by -t"
	puts "  "
	puts "  possible \[parameters\] are listed below, defaults are in <>."
	puts "  "
	puts [cmdline::usage $optlist]
	exit 1
}

#
# checks if the path to repo $r is accessible and resembles git, returns 0/1
#
proc git_valid_repo {r} {
	if ![valid_dir $r] {
		return 0
	} else {
		# check if .git present in the src dir
		if ![file exists $r/.git] {
			p_err "'$r' is not a git repository"
			return 0
		}
	}

	return 1
}

#
# checks the src git repo specified, returns 0/1.
#
# git src can be specified as:
#
# "-s /home/git/u-boot"
#
proc git_valid_src {src} {
	if ![git_valid_repo $src] {
		p_err "Not a valid git repository: '$src'"
		return 0
	}

	return 1
}

#
# checks git dest location - it can be specified in the following conventions:
#
# "-d <some_dir>/<name>" e.g. for U-Boot: -d ~/u-boot.mycopy
#
# "-d <some_dir>" e.g. -d ~
#
# the specification is checked against:
#   - already exists?
#   - parent dir writable?
#
# returns 0/1
#
proc git_valid_dst {dst} {
	set dst [string trimright $dst "/"]
	if [file exists $dst] {
		if [file exists "$dst/.git"] {
			p_err "destination location already has git repo:\
			'$dst'"
			return 0
		} else {
			if ![valid_dir $dst 1] {
				p_err "access problems with destination:\
				'$dst'"
				return 0
			}
		}
	}

	return 1
}

#
# create a new branch off an existing branch
#
proc git_create_branch {branchpoint newbranch} {
	set c "git-checkout -f -b $newbranch $branchpoint"
	p_banner "$c" *
	if ![exec2_log "$c 2>&1" res] {
		p_err "$res"
		return 0
	}

	return 1
}

#
# performs git-clone command, returns 0/1 upon fail/success
#
proc git_clone {src dst} {
	set c "git-clone $src $dst"
	p_banner "$c" *
	if ![exec2_log "$c 2>@1" res] {
		p_err "$res"
		return 0
	}

	return 1
}

#
# handler function to perform git operations to get local repo of
# the sources
#
proc do_git {src dst rev} {
	if ![string match "git://*" $src] {
		if ![git_valid_src $src] {
			exit1
		}
	}
	p_verb "Working with source repo: '$src'"

	if ![git_valid_dst $dst] {
		exit1
	}
	p_verb "Working with destination repo: '$dst'"

	p_verb "Using supplied revision: '$rev'"

	##
	## validations passed, let's do something real
	##
	p_banner "Starting git operation, please wait..." "#"

	if ![git_clone $src $dst] {
		exit1
	}

	cd $dst
	p_banner "Checking out revision '$rev' to new branch 'DUTS-Internal'"
	if ![git_create_branch $rev "DUTS-Internal"] {
		p_warn "repo '$src' cloned successfully to\
		'$dst' but cloning '$branch' into new branch failed.\
		Therefore the repo may be in inconsistent\
		state, please check and manage this manually."
		exit1
	}

	p_banner "Finished git operation, thank you for your patience." "#"
}

proc do_cvs {} {
	#TODO if required
	p_err "Not implemented"
	##
	##
	## [CVS]
	## ...
	## ...
	##
	##
}

proc do_local {} {
	#TODO if required
	p_err "Not implemented"
	##
	##
	## cp -R <repo_src> <repo_dst>
	## ...
	## ...
	##
	##
}

##
## default values
##
set verbose "no"

# Option handling
set options {
	{d.arg		""	"destination directory"}
	{r.arg		"origin/master"	"revision to check out"}
	{s.arg		""	"source directory"}
	{t.arg		"git"	"scm to use"}
	{v              	"be verbose"}
}

# Actually parse the parameters
if {[catch {cmdline::getoptions argv $options} res]} {
	puts "Hey!"
	usage $options
} else {
	array set params $res
}

# Check parameter validity
if {$params(s) == ""} {
	puts "No source given, please specify one with -s"
	exit 1
}
if {$params(d) == ""} {
	puts "No destination given, please specify one with -d"
	exit 1
}
if {$params(v)} {
	verbose = 1
}


# Toggle between handlers
switch $params(t) {
	"git"	{ do_git $params(s) $params(d) $params(r) }
	"scm"	{ do_scm $params(s) $params(d) $params(r) }
	"cvs"	{ do_cvs $params(s) $params(d) $params(r) }
	"local" { do_local $params(s) $params(d) $params(r) }
	default	{ p_err "SCM type '$params(t)' not supported" 1 }
}
