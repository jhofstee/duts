#!/bin/env expect
#
# (C) Copyright 2006
# Wolfgang Denk, DENX Software Engineering, wd@denx.de
#
#

set BASE_DIR "/home/raj/git/duts/"


##
## include helper procedures
##
source "$BASE_DIR/include/lib.tcl"


#
# ./get_src [<config>] [-t <SCM type>] [-n <repo_name>] [-s <repo_src>] 
#	[-d <repo_dst>] [-p <other params>] [-to <timeout>] [-nc]
#
# [<config>] - config label
# [-t <SCM type>] - id of supported scm (git, cvs)
# [-n <repo_name>] - name in the repo (u-boot, linuxppc_2_4_devel, linux-2.6-denx etc.)
# [-s <repo_src>] - repo location (/home/git)
# [-d <repo_dst>] - dest location (./u-boot_copy etc.)
# [-p <other repo params>]
# [-to <timeout>] - timeout in seconds for repo op to complete
#
# [-nc]	- no user confirmation
# [-v]	- verbose
#
#
#  examples:
# ./get_src -n linuxppc_2_4_devel -t git -s /home/git/ -d linuxppc_2_4_devel_copy -p [branchID]
#
# ./get_src linux24 - uses 'linux24' predefined config
# ./get_src [empty params] - uses default config
#


# default values
set verbose "no"
set confirm "yes"

set scm_config ""
set scm_handler ""

set TIMEOUT 10

#
# table of supported SCM schemes, each element is
# {<handler_function> "<name>"}
#
# <name> is the label for use in '-t' command line option or 'scm_type' field 
# in config file
#
set scm_supported {
	{do_git "git"}
	{do_cvs "cvs"}
	{do_local "local"}
}

#
# table of user interface options, each element is
# {<global_var_name> "<opt_string>" "<default_value>"}
set opt_table {
	{repo_type "t" "git"}
	{repo_name "n" "u-boot"}
	{repo_src "s" "/home/git/"}
	{repo_dst "d" ""}
	{repo_params "p" ""}
	{scm_timeout  "to" "180"}
}

#
# dumps params
#
proc show_params {} {
	
	global opt_table
	set globals [list]

	# create list of global vars names from opt table
	foreach o $opt_table {
		set var_name [lindex $o 0]
		lappend globals $var_name
	}

	# add other interesting global vars to the list
	lappend globals "confirm" "verbose" "scm_config"

	puts "--- Settings ---"
	foreach g $globals {
		global $g
		puts "$g = '[subst $$g]'"
	}
}

#
# handler function to perform GIT operations to get local repo of
# the sources
#
proc do_git {} {

	global repo_type repo_name repo_src repo_dst repo_params
	global scm_timeout confirm TIMEOUT

	##
	## check tools availability:
	##  - shell
	##  - SCM (cogito)
	##
	set cmd_shell "bash"
	set cmd_co "cg-clone"

	set tools [list $cmd_shell $cmd_co]
	if ![check_host_tools tools] {
		exit1
	}
	p_verb "all tools in place, proceeding"

	##
	## validate git source repo location
	##
	if ![regexp {/$} $repo_src] {
		set repo_src "$repo_src/"
	}
	set src $repo_src$repo_name
	if ![valid_dir $src] {
		p_err "Problems accessing '$src' source GIT repo?!" 1
	}
	p_verb "Working with source repo: '$src'"

	##
	## validate git destination location
	## - already exists?
	## - parent dir writable?
	##
	if {$repo_dst != ""} {
		set dst_dir [file dirname $repo_dst]
		set dst_file [file tail $repo_dst]
		if ![valid_dir $dst_dir 1] {
			p_err "problems accessing destination directory?!" 1
		}
		set tmp $repo_dst
	} else {
		set tmp [file tail $src]
		set tmp "./$tmp"
	}
	if [file exists $tmp] {
		p_err "destination location '$tmp' already exists!" 1
	}

	##
	## ask user before proceeding
	##
	if {$confirm == "yes"} {
		show_params
		if ![ask_yesno "confirm to start execution? "] {
			exit
		}
	}
	p_banner "Starting GIT operation, please wait..." "#"

	##
	## prepare cg-clone command: cg-clone <repo_src> <repo_dst>
	##  
	set c $cmd_co
	set c_arg $src
	if {$repo_dst != ""} {
		set c_arg "$c_arg $repo_dst"
	}

	# ignore user rc files so we can be sure of the default bash prompt
	set cmd_shell_opt "--norc --noprofile"
	set cmd_shell_prompt "\\$\\ "

	##
	## spawn host shell
	##
	set timeout $TIMEOUT
	set send_slow {1 .050}
	set p $cmd_shell_prompt

	set spawn_id [process_spawn $cmd_shell $cmd_shell_opt]
	if {$spawn_id < 0} {
		p_err "problems spawning shell" 1
	}
	# Notice: we HAVE to wait for the initial prompt of the just spawned
	# shell! otherwise we wouldn't know when to issue the command...
	expect {
		-re "$p$" { p_verb "host shell prompt OK" }
		timeout { p_err "timed out waiting for prompt: '$p'" 1 }
	}

	##
	## execute command
	##  
	#
	# strings:
	# ...
	#Fetching head...^M
	#Fetching objects...^M
	#Fetching tags...^M
	#...
	#New branch: f60ba0d35e13e9dcf839d4563f9436d07468b1ef^M
	#Cloned to u-boot/ (origin /home/git/u-boot available as branch "origin")^M
	#
	#
	#cg-clone: u-boot/ already exists
	#

	# expect buffer size
	match_max 16384

	set errors 0
	set timeout $scm_timeout 
	send -s "$c $c_arg\r"
	expect {
		timeout {
			p_err "timed out after cg-clone"
			set errors 1
		}
		-re "already exists.*$p$" {
			#
			# this actually shouldn't happen as we checked earlier
			# for such condition, but let's handle it still - we're
			# in a multi-user environment after all and things can
			# happen behind our back...
			#
			p_err "repo already cloned"
			set errors 1
		}
		-re ".*Fetching\\ head\\.\\.\\." {
			p_verb "fetching 1: heads"
			expect {
				timeout {
					p_err "timed out on 'objects'"
					set errors 1
				}
				-re ".*Fetching\\ objects\\.\\.\\." {
					p_verb "fetching 2: objects"
					expect {
						timeout {
							p_err "timed out on cloning"
							set errors 1
						}
						-re ".*Cloned\\ to\\ .*$p$" {
							p_verb "Cloning OK"
						}
					}
				}
			}
		}
	}

	##
	## close spawned process
	##
	process_close $spawn_id
	set spawn_id -1

	if {$errors > 0} {
		exit1
	}

	p_banner "Finished GIT operation, thanks for patience." "#"
}

proc do_cvs {} {
	#TODO if required
	p_err "Not implemented"
	##
	##
	## [CVS]
	## ...
	## ...
	##
	##
}

proc do_local {} {
	#TODO if required
	p_err "Not implemented"
	##
	##
	## cp -R <repo_src> <repo_dst>
	## ...
	## ...
	##
	##
}


#
# searches $scm_supported table for $repo_typer SCM name and calls associated
# handler, if found.
#
proc scm_handler {} {
	global scm_supported repo_type
	set found 0

	foreach scm $scm_supported {
		if {[lindex $scm 1] == $repo_type} {
			set found 1
			set h [lindex $scm 0]
			p_verb "calling '$h' SCM handler"
			$h
		}
	}
	if {!$found} {
		p_err "SCM type '$repo_type' not supported" 1
	}
}

#
# parameters are taken from (highest to lowest prio):
# 1. user-supplied in command line
# 2. config file
# 3. env vars
# 4. built-in defaults
#
# TODO config file
# TODO support for setting params via env vars
# TODO built-in defaults


#
# parses command line parameters supplied by the user
#
# -t SCM type
# -s source
# -d dest
# -n name
# -p other params
#
#
proc parse_params {} {

	global argc argv
	global scm_config
	global opt_table opt_list

	set errors 0

	for {set i 0} {$i < $argc} {incr i} {
		set a [lindex $argv $i]
		
		# check if this is -<opt> element
		if [regexp {^-.*} $a] {
			# eat the leading "-"
			set o [string trimleft $a "-"]

			if [on_list opt_list $o] {
				# we have option from opt_table
				incr i
				if ![opt_process $o [lindex $argv $i]] {
					set errors 1
				}
			} else {
				# remaining -<opt> cases (special)
				switch -- \
				$o "v" {
					global verbose
					set verbose "yes"
					p_verb "verbose mode ON"

				} "nc" {
					global confirm
					set confirm "no"
					p_verb "no user confirmation"
				}
			}
			continue
		}

		##
		## get config name
		##
		set scm_config $arg
		p_verb "config '$scm_config'"
	}
	if {$errors > 0} {
		exit1
	}

	# TODO try loading _default config
	if {$scm_config != ""} {
		#TODO
		# load config file
	}
}


set argc [llength $argv]

##
## create global variables out of options table
##
opt_create_globals

##
## parse paramters
##
parse_params

##
## run SCM handler
##
scm_handler

##
## exit successfully if we got this far
##
exit
