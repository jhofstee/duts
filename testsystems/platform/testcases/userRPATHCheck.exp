#
# Check for RPATH
#
global CFG_ROOTPATH
global env

proc _walk {dir cmd} {
	set files [list]
	foreach f [glob -nocomplain [file join $dir *]] {
		set type [file type $f]
		switch $type {
			directory {
				if {[file readable $f]} {
					_walk $f $cmd
				} else {
					p_warn "Directory $f not readable - skipping"
				}
			}
			file {
				lappend files $f
			}
			default {
				# Goofy file types -- just ignore them
			}
		}
	}
	eval $cmd files
}

proc rpath_check_files {fl} {
	global cnt
	upvar $fl files
	log_user 0
	exp_internal 0
	foreach file $files {
		if {[string match ".*a" [file extension $file]] || \
			([file extension "$file"] != ".so" && ![file executable "$file"])} {
			continue
		}
		if [exec2 "file $file" out err] {
			p_warn "Error running file on '$file': $err"
		} elseif {![regexp "^.*:.*ELF.*$" $out]} {
			continue
		}
		p_verb "checking $file"
		if [exec2 "readelf -d $file" out err] {
			p_warn "Error running readelf on '$file': $err"
		} else {
			# Do we have an rpath entry?
			if {[regexp {Library rpath: \[([^\]]*)\]} $out all lib]} {
				if {![regexp [format "%s%s%s%s%s%s" \
						  "^(/usr/lib|/usr/lib64|/lib|/lib64" \
						  "|/etc/appWeb/bin" \
						  "|/usr/lib/appweb/modules" \
						  "|/usr/local/xenomai/lib" \
						  "|/usr/lib/perl5/.*" \
						  "|\\\$ORIGIN)$"] $lib]} {
					incr cnt
					p_warn "$file contains wrong RPATH: $lib"
				}
			}
		}
	}
}

if [in_array env ROOTPATH]  {
	p_verb "ROOTPATH in env array"
	set check_path $env(ROOTPATH)
} elseif [var_exists CFG_ROOTPATH] {
	p_warn "ROOTPATH is not set, CFG_ROOTPATH will be used"
	set check_path $CFG_ROOTPATH
} else {
	p_err "ROOTPATH or CFG_ROOTPATH is not set"
	return 0
}

set cnt 0
_walk $check_path rpath_check_files
return [expr $cnt != 0]
