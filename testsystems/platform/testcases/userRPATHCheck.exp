#
# Check for RPATH
#
global CFG_ROOTPATH
global env

proc _walk {dir cmd} {
	set files [list]
	foreach f [glob -nocomplain [file join $dir *]] {
		set type [file type $f]
		switch $type {
			directory {
				if {[file readable $f]} {
					_walk $f $cmd
				} else {
					p_warn "Directory $f not readable - skipping"
				}
			}
			file {
				lappend files $f
			}
			default {
				# Goofy file types -- just ignore them
			}
		}
	}
	eval $cmd files
}

proc rpath_check_files {fl} {
	global cnt
	upvar $fl files
	p_verb "rpath_check func"
	log_user 0
	exp_internal 0
	foreach file $files {
		if [string match ".*a" [file extension $file]] {
			p_verb "$file  == .a(.la)"
			continue
		}
		if {[file extension "$file"] != ".so" && ![file executable "$file"]} {
			p_verb "$file != .so || exec"
			continue
		}
		p_verb "pass 1 $file"
		spawn file $file
		p_verb "SPWN: $spawn_id"
		expect {
			-re "^.*:.*ELF.*$" {
				p_verb "ELF file: $file"
				close
				wait
			} eof {
				p_verb "skip non-ELF file: $file"
				wait
				continue
			}
		}
		p_verb "pass 2 $file"
		spawn readelf -d $file
		p_verb "SPWN: $spawn_id"
		expect {
			-re {Library rpath: \[([^\]]*)} {
				set temp $expect_out(1,string)
				p_verb "temp match: $temp"
				if {![regexp [format "%s%s%s%s%s%s" \
						  "^(/usr/lib|/usr/lib64|/lib|/lib64" \
						  "|/etc/appWeb/bin" \
						  "|/usr/lib/appweb/modules" \
						  "|/usr/local/xenomai/lib" \
						  "|/usr/lib/perl5/.*" \
						  "|\\\$ORIGIN)$"] $temp]} {
					incr cnt
					p_warn "$file contains wrong RPATH: $temp"
				}
				close
				wait
			} eof wait
		}
	}
}

if [in_array env ROOTPATH]  {
	p_verb "ROOTPATH in env array"
	set check_path $env(ROOTPATH)
} elseif [var_exists CFG_ROOTPATH] {
	p_warn "ROOTPATH is not set, CFG_ROOTPATH will be used"
	set check_path $CFG_ROOTPATH
} else {
	p_err "ROOTPATH or CFG_ROOTPATH is not set"
	return 0
}

set cnt 0
_walk $check_path rpath_check_files
return [expr $cnt != 0]
