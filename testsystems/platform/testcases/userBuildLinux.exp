#
# Build 2.x kernel
#

global BASE_DIR
global LINUX_GIT_REPO LINUX_GIT_BRANCH
global BUILD_TARGET_PREFIX BUILD_TARGET BUILD_ARCH BUILD_CROSS
global _context_kernel_image

#here we're extracting repo name - to use as a base dir to checkout stuff
if ![regexp {([^:]+)://(.+)/(.+)}  $LINUX_GIT_REPO match protocol serv repo] {
	p_err "Incorrect git repo: $LINUX_GIT_REPO!"
	return 0
}

set duts_ext "_DUTS"
set src $LINUX_GIT_REPO
set dst "./${repo}${duts_ext}"

###############################
set tools_dir "$BASE_DIR/tools"

##
## get sources
##
if [valid_dir $dst] {
	# TODO - validate it is actually a kernel tree - like we do in
	# check_linux_ver{} (tools/bld_linux.exp) - maybe put it in
	# some common file

	set cmd "grep"
	set cmd_arg "$LINUX_GIT_REPO $dst/.git/config"

	set o ""
	if [catch {set o [eval exec $cmd $cmd_arg]}] {
		puts "$dst exists but is not from $LINUX_GIT_REPO!"
		puts "you will need to remove $dst to proceed"
		return 0
	} else {
		# seems the specified repo directory is already checked
		# out so don't bother with executing get_src
		p_banner "GIT tree exists, switching to branch $LINUX_GIT_BRANCH..."

		cd $dst

		set tool_cmd "git checkout "
		set tool_arg "-f $LINUX_GIT_BRANCH"
		if ![exec2_log "$tool_cmd $tool_arg" err] {
			puts "$err"
			return 0
		}

		p_warn "using already checked out source tree: '$dst'"
		cd ".."
	}
} else {
	##
	## run get_src to check out the kernel tree
	##
	# tools/get_src -r <rev> -s <src> -d <dst>
	set tool_cmd "$tools_dir/get_src"
	set tool_arg "-r $LINUX_GIT_BRANCH -s $src -d $dst"
	p_verb "executing: '$tool_cmd $tool_arg'"

	p_banner "Checking out kernel source tree, please wait - this may take a while..." *
	if ![exec2_log "$tool_cmd $tool_arg" err] {
		puts "$err"
		return 0
	}

	p_banner "Kernel tree checked out" *
}


##
## Build the image
##
# Note that the $dst from previous stage now is our $src ;)
set src $dst
set dst $_context_kernel_image
set dst_dir [file dirname $dst]
if ![valid_dir $dst_dir 1] {
	p_err "destination dir not accessible: '$dst_dir''"
	return 0
}

## run build_image to build the image
#
# -n <board_name> -s <srcdir> -d /tftpboot/<board_name>
# -m <build_tools> -a <build_arch> -c <build_cross>
# -b -o linux
#
##
set tool_cmd "$tools_dir/build_image"
if [ info exists BUILD_TARGET_PREFIX ] {
	set tool_arg "-s $src -d $dst -n $BUILD_TARGET_PREFIX/$BUILD_TARGET \
	-a $BUILD_ARCH -c $BUILD_CROSS linux"
} else {
	set tool_arg "-s $src -d $dst -n $BUILD_TARGET \
		-a $BUILD_ARCH -c $BUILD_CROSS linux"
}
if [file exists $dst] {
	p_warn "destination kernel image already exists and will be\
		overwritten: '$dst'"
	set tool_arg "-o $tool_arg"
}

p_verb "executing: '$tool_cmd $tool_arg'"

p_banner "Building kernel image, please wait - this may take a while..." *

if ![exec2_log "$tool_cmd $tool_arg" err] {
	puts "$err"
	return 0
}

p_banner "Finished building kernel image" *
return 1

